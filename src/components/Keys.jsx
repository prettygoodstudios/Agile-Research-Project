import React from "react";
import Tooltip from "./Tooltip.jsx";

const Keys = ({}) => {
    return (
        <div className="section keys">
            <h1 className="section__header">What are the key components of all Agile frameworks?</h1>
            <h2 className="keys__component">Product Backlog</h2>
            <img src="https://d2slcw3kip6qmk.cloudfront.net/marketing/blog/2019Q1/scrum-kanban-boards/basic-kanban-board-with-prioritization.png"/>
            <p>All Agile frameworks rely on some sort of product backlog. A product backlog is a collection of features that have been requested to be developed. Each item in the backlog has a priority. Higher priority items will exit the backlog and be worked on sooner. The process of adding, removing and adjusting backlog items is called refinement. Different frameworks/implementations have different practices for refining backlog items. In general backlog items are refined with the input of the <Tooltip word="product owner" definition="An advocate for stakeholders."/>, <Tooltip word="stakeholders" definition="Individuals with an interest in the success of the project such as customers and business owners."/>, <Tooltip word="Agile Coach" definition="A role tasked with assisting team members in following Agile methodologies."/> and team members. All of these individuals are necessary in the refinement process as an intimate knowledge of the customerâ€™s demands as well as the technical aspects involved is necessary. <Tooltip word="Software system design" definition="The analysis and design of systems of software. This includes modeling and identifying discrete software components. This allows a complex software project to be broken down into independent components that can be developed and delivered individually."/> from software engineering can be used to determine the dependency between feature requests and how to break up the features into separate tasks that can be completed and integrated. The backlog refinement process is crucial to the Agile development process as it supports the following Agile core values: customer collaboration over contract negotiation, working software over comprehensive documentation and responding to change over following a plan.</p>
            <p className="keys__details">Note: The words in red will display their defintions upon hovering.</p>
            <h2 className="keys__component">User Stories</h2>
            <img src="https://www.mountaingoatsoftware.com/uploads/blog/2014-04-15-building-a-product-users-want-from-idea-to-backlog-with-the-vision-board.png"/>
            <p>Inorder for the Agile software development process to work software must be broken down into small independent components. This is generally done by breaking down the software into a list of features. These features are then broken down into discrete components called user stories. Each user story describes how that component will be used from the perspective of the user. This is in contrast with the traditional approach of describing a feature in terms of requirements. The lack of requirements in user stories allows the feature to adapt to the needs of the customer as no specific requirements are committed to. In addition, user stories help the development team identify the purpose and the deliverables for specific components of the software.</p>
            <h2 className="keys__component">Self-Managing Teams</h2>
            <img src="https://d2o2utebsixu4k.cloudfront.net/media/uploads/2017/04/agile-tools.png" />
            <p>Self-managing teams are another component of all Agile frameworks. A self-managing team is a team that is independently accountable and responsible for delivering a specific product or service. This often requires teams composed of individuals with different specialities and skill sets. Teams of this nature are commonly referred to as cross-functional. For example, the latest <Tooltip word="Scrum Guide" definition="A guide followed by many Agile practitioners. Particulary those that follow the Scrum framework." /> dictates that there should be no dedicated Quality Assurance and DevOps teams. Traditionally there is a dedicated Quality Assurance team for testing code and a DevOps team in charge of managing infrastructure such as servers, networking equipment and cloud computing configurations. Many implementations of Agile eliminate these dedicated teams. This requires team-members to be flexible and motivated as they must coordinate with team-members with extremely different skill sets. In addition, it places additional accountability on each team-member as there is generally only one member of each skill set on each team. If there is no buy in from team-members, this can be quite challenging. Therefore, Agile should only be implemented when it fits the company culture and work environment.</p>
        </div>
    )
}

export default Keys;